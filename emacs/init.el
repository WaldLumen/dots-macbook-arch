(require 'package)(setq package-archives '(("melpa" . "https://melpa.org/packages/")                         ("gnu" . "https://elpa.gnu.org/packages/")))(package-initialize)(unless (package-installed-p 'use-package)  (package-install 'use-package))(require 'use-package);; Установить прозрачность фрейма(set-frame-parameter (selected-frame) 'alpha-background 80) ;; Прозрачность фона(add-to-list 'default-frame-alist '(alpha-background . 80));; Установка и настройка doom-modeline(use-package doom-modeline  :ensure t  :init  (doom-modeline-mode 1)  :config  (setq doom-modeline-height 100)  (setq doom-modeline-bar-width 3)  (setq doom-modeline-minor-modes nil)  ; Скрыть минорные режимы (minions займётся этим)  (setq doom-modeline-icon t)  (setq doom-modeline-major-mode-icon t));; Установка шрифта(set-face-attribute 'default nil :font "JetBrains Mono Nerd Font" :height 130);; Общие улучшения(scroll-bar-mode -1)        ; Отключить скроллбар(tool-bar-mode -1)          ; Отключить тулбар(tooltip-mode -1)           ; Отключить всплывающие подсказки(menu-bar-mode -1)          ; Отключить меню(set-fringe-mode 10)        ; Отступы(custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(org-safe-remote-resources   '("\\`https://fniessen\\.github\\.io/org-html-themes/org/theme-readtheorg\\.setup\\'")) '(package-selected-packages   '(yasnippet company lsp-ui lsp-mode rustic enlight minions doom-modeline moody)))(custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. )(use-package doom-themes  :ensure t  :config  ;; Global settings (defaults)  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled        doom-themes-enable-italic t) ; if nil, italics is universally disabled  (load-theme 'doom-nord-light t)  ;; Enable flashing mode-line on errors  (doom-themes-visual-bell-config)  ;; Enable custom neotree theme (all-the-icons must be installed!)  (doom-themes-neotree-config)  ;; or for treemacs users  (setq doom-themes-treemacs-theme "doom-nord-light") ; use "doom-colors" for less minimal icon theme  (doom-themes-treemacs-config)  ;; Corrects (and improves) org-mode's native fontification.  (doom-themes-org-config));; Startpage(setopt initial-buffer-choice #'enlight)(use-package grid  :init  (unless (package-installed-p 'grid)    (package-vc-install     '(grid       :vc-backend Git       :url "https://github.com/ichernyshovvv/grid.el"       :branch "master"))))(require 'grid)(use-package enlight  :custom  (enlight-content   (grid-get-row    `(,(enlight-menu        '(("Org Mode"           ("Org-Agenda (current day)" (org-agenda nil "a") "a"))          ("Downloads"           ("Transmission" transmission "t")           ("Downloads folder" (dired "~/Downloads") "a"))          ("Other"           ("Projects" project-switch-project "p"))))      "   "      ,(enlight-menu        `(("Enlight Settings"           ("Jump to the config"            (progn              (find-file ,user-init-file)              (goto-char (point-min))              (search-forward "use-package enlight"))            "j")           ("Update"            (let ((beg (point)))              (with-current-buffer                  (find-file-noselect ,user-init-file)                (goto-char (point-min))                (search-forward "use-package enlight")                (eval-defun nil)                (enlight))              (goto-char beg))            "g"))          ("Important notes"	   ("Projects"     (find-file "~/documents/notes/self/mind/projects.org")     "1")           ("Month goals"  (find-file "~/documents/notes/self/mind/month_goals.org")  "2")           ("Year goals"   (find-file "~/documents/notes/self/mind/year_goals.org")   "3")           ("Global goals" (find-file "~/documents/notes/self/mind/global_goals.org") "4"))))))));; RUST(use-package rustic  :ensure  :bind (:map rustic-mode-map              ("M-j" . lsp-ui-imenu)              ("M-?" . lsp-find-references)              ("C-c C-c l" . flycheck-list-errors)              ("C-c C-c a" . lsp-execute-code-action)              ("C-c C-c r" . lsp-rename)              ("C-c C-c q" . lsp-workspace-restart)              ("C-c C-c Q" . lsp-workspace-shutdown)              ("C-c C-c s" . lsp-rust-analyzer-status))  :config  ;; uncomment for less flashiness  ;; (setq lsp-eldoc-hook nil)  ;; (setq lsp-enable-symbol-highlighting nil)  ;; (setq lsp-signature-auto-activate nil)  ;; comment to disable rustfmt on save  (setq rustic-format-on-save t)  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))(defun rk/rustic-mode-hook ()  ;; so that run C-c C-c C-r works without having to confirm, but don't try to  ;; save rust buffers that are not file visiting. Once  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should  ;; no longer be necessary.  (when buffer-file-name    (setq-local buffer-save-without-query t))  (add-hook 'before-save-hook 'lsp-format-buffer nil t))(use-package lsp-mode  :ensure  :commands lsp  :custom  ;; what to use when checking on-save. "check" is default, I prefer clippy  (lsp-rust-analyzer-cargo-watch-command "clippy")  (lsp-eldoc-render-all t)  (lsp-idle-delay 0.6)  ;; enable / disable the hints as you prefer:  (lsp-inlay-hint-enable t)  ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")  (lsp-rust-analyzer-display-chaining-hints t)  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)  (lsp-rust-analyzer-display-closure-return-type-hints t)  (lsp-rust-analyzer-display-parameter-hints nil)  (lsp-rust-analyzer-display-reborrow-hints nil)  :config  (add-hook 'lsp-mode-hook 'lsp-ui-mode))(use-package lsp-ui  :ensure  :commands lsp-ui-mode  :custom  (lsp-ui-peek-always-show t)  (lsp-ui-sideline-show-hover t)  (lsp-ui-doc-enable nil))(use-package company  :ensure  :custom  (company-idle-delay 0.5) ;; how long to wait until popup  ;; (company-begin-commands nil) ;; uncomment to disable popup  :bind  (:map company-active-map	      ("C-n". company-select-next)	      ("C-p". company-select-previous)	      ("M-<". company-select-first)	      ("M->". company-select-last)))(use-package yasnippet  :ensure  :config  (yas-reload-all)  (add-hook 'prog-mode-hook 'yas-minor-mode)  (add-hook 'text-mode-hook 'yas-minor-mode))(use-package flycheck :ensure)